class Solution(object):
    def knapsack(self, w: list, v: list, W: int) -> int:
        """
        You are given n objects which cannot be broken into smaller pieces. Moreover, you have
        only one copy of each object. Each object i (where 1 ≤ i ≤ n) has weight wi > 0 and           
        value vi > 0. You have a knapsack that can carry a total weight not exceeding W.               
        Your goal is to fill the knapsack in a way that maximizes the total value of the               
        included objects, while respecting the capacity constraint. 
        For each object i (where 1 ≤ i ≤ n), either you bring it or not.
        """
        assert len(w) == len(v)
        assert min(w) > 0
        assert min(v) > 0
        assert W > 0
        
        m = []
        
        for i in range(len(w) + 1):
            m.append(list())
            for j in range(W + 1):
                m[i].append(0)
                
        for i in range(1, len(w) + 1):
            for j in range(1, W + 1):
                #if the i-th object alone exceeds the knapsack's capacity, we can't carry it
                if j < w[i - 1]:
                    m[i][j] = m[i - 1][j]
                else:
                    #if the i-th object alone doesn't exceed the the knapsack's capacity
                    #we can make a choice. 
                    #1. if we don't carry it, the maximum value will be the same as 
                    #m[i - 1][j];
                    #2. otherwise the value will the value of i-th object, plus the maximum                       
                    #value of a knapsack with j - w[i - 1] capacity can carry.
                    #we need the max value of 1 and 2.
                    m[i][j] = max(m[i - 1][j], m[i - 1][j - w[i - 1]] + v[i - 1])
                    
        i = len(w)
        j = W
        while i > 0 and j > 0:
            #the only condition that we need to carry object i
            if j >= w[i - 1] and m[i - 1][j] <= m[i - 1][j - w[i - 1]] + v[i - 1]:
                print("Carry object " + str(i))
                j = j - w[i - 1]
                i = i - 1
            else:
                i = i - 1
        return m[len(w)][W]
    
if __name__ == '__main__':
    w = [2,3,2,9,3,2]
    v = [7,1,6,18,22,28]
    W = 5
    s = Solution()
    print(s.knapsack(w, v, W))
    
    
   
